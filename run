#!/bin/bash
REPO_ROOT_DIR=$(pwd)

for argument in $*
do
    case "$argument" in
        -f) shift; VALUES_FILE=$1; shift;;
        --action) shift; ACTION=$1; shift;;
    esac
done

DOCKER_IMAGE_NAME=devcodemy/img_cc2:v1
IS_IMG_EXIST=''

docker images --format='{{json .Repository}}:{{json .Tag}}' | tr -d \" > docker_images.txt
readarray -t docker_img_arr < docker_images.txt

CHK_NONE_TAGS=$(docker images -f "dangling=true" -q)

if [[ -n ${CHK_NONE_TAGS} ]]; then
  docker rmi -f $(docker images -f "dangling=true" -q)
fi

rebuild() {
  docker build -t $DOCKER_IMAGE_NAME $REPO_ROOT_DIR/dockerfiles
}

for i in "${docker_img_arr[@]}"; do 
  if [[ $i = ${DOCKER_IMAGE_NAME} ]]; then
    IS_IMG_EXIST='1'
  fi;
done

if [[ -z ${IS_IMG_EXIST} ]]; then
  #statements
  echo "Image ${DOCKER_IMAGE_NAME} is NOT exist!!!"
  echo ".................. Lets build it!"
  rebuild
else
  echo "Docker image ${DOCKER_IMAGE_NAME} exist!"
fi

# readarray -t git_url_arr < git_url.txt
# for i in "${git_url_arr[@]}"; do git clone $i; done


# AWS_ACCESS_KEY_ID=$(aws --profile default configure get aws_access_key_id)
# AWS_SECRET_ACCESS_KEY=$(aws --profile default configure get aws_secret_access_key)

case $ACTION in
     check)      
          docker run -i --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --dns=1.1.1.1 -v ${REPO_ROOT_DIR}:/app -u $(id -u):$(id -g) --name cc2 $DOCKER_IMAGE_NAME /app/scripts/up
          ;;
     # destroy)
     #      cat $VALUES_FILE | docker run -i --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --dns=1.1.1.1 -v ${REPO_ROOT_DIR}:/app -v ${REPO_ROOT_DIR_CLUSTERS}:/app/_clusters -u $(id -u):$(id -g) --name kubeup codefresh/kubeup /app/destroy
     help)
          echo ' --------------------------------------------------------------'
          echo "For create cluster type:" && echo "  ./run -f values_file.yaml --action create" && echo
          echo "For destroy cluster type:" && echo "  ./run -f values_file.yaml --action destroy" && echo
          echo "For check environment type:" && echo "  ./run --action check" && echo
          echo "For get help type:" && echo "./run --action help"
          echo ' --------------------------------------------------------------'
          ;;
     rebuild)
          # docker build -t $DOCKER_IMAGE_NAME ${REPO_ROOT_DIR}/dockerfiles
          rebuild
          ;;
     *)
          # usage
          echo "default usage ./run --action * - Nothing to do!"
          ;;
esac

# . helper
# ./run -f values.yaml --action create
# ./run -f values.yaml --action destroy
